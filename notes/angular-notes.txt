ANGULAR


~~~~~~~~~~ Getting Started ~~~~~~~~~~

Note: The C.L.I. is not the only way to build an Angular app.
You could build it by including only the necessary package.json files and config files.
Also, the C.L.I. gives us a large version, full of libraries, we can easily remove libraries we are not going to use,
so even though the initial app is full of resources, we can easily modify it to become a light weight framework.

    ng help




Generating and serving an Angular project via a development server:

    ng new app
    cd app
    ng serve

"app" will be the project name. you may say "ng serve app" to serve it up without having to cd up there

if using routing, you'll want to use:

    ng new app --routing


Served on localhost://4200 by default. The following command can help that if you like.

    ng serve --host 0.0.0.0 --port 4201




Generating new Components, Directives, Pipes, Services

    ng generate component myNewComponent

You can also use g for generate, and c for component

    ng g directive|pipe|service|class|guard|interface|enum|module

    ng g d|p|s|c|g|i|e|m




Serving Angular with Node/Express

Make sure the angular application is contained within the root folder of the express project, and cd into the agular app.

    ng build --watch

This will create a "dist" folder by converting all the TS angular files into minified JavaScript and putting it there.
The '--watch' portion of the command launches an additional Node server which keeps watch over all of our Angular TypeScript files. 
If any TS files get modified, this server will automatically run 'ng build', so the distribution folder is always up to date.

Lastly, we need our Express project to define a static route to the newly created dist folder.

    app.use(express.static( __dirname + '/my-angular-app/dist' ));








~~~~~~~~~~ Terminology ~~~~~~~~~~


Components:

These are basically portions of our webpage, built with html, css, and ts files.
Each should have what it needs to function independently.
Represented in Angulars' TS as a class.




Services:

This is where we store the data sent from the server. It is Angulars' Model
Any models' job is to serve data to the controller (typescript files)

When using the same service many times, rather than having the same one in many components, we save memory/space
by simply having a single instance, and "injecting" it to any component as needed on the fly.




Observables:

These enable services to make AJAX requests, and talk to the server for data.

"Observables are a way to manage asynchronous data. With Angular, an http response is an Observable. 
Observables deliver data over time, so we can be notified if the data ever changes."

While waiting for data to return, the app will continue executing any other tasks as needed.

An Observable will deliver its data to any part of the app that has subscribed to it by way of its' subscribe method
Inside the subscribe method, we'll also write what we would like to do with the data once we have it.

There are many other things we can do with Observables, but for now we will focus on this.








~~~~~~~~~~ Creating a New Service ~~~~~~~~~~


We'll set up our service by navigating to our Angular app in our terminal and running this line:

    ng g s http

Here, we're naming our service 'http', but you may name it whatever you like. This gives us a file called http.service.ts.
Open this file and you'll see that we are exporting a class called HttpService, which means another file can import it!




Register the service:

To use our service, we'll need to register it with the app. Open app.module.ts and import HttpService. 
Provide the file path to your service file. Next, include HttpService in the array of providers.


.../app/app.module.ts

    import { HttpService } from './http.service';
    @NgModule({
    //    ...
    providers: [HttpService],
    //    ...
    })




HttpClient:

We made our service so that it can fetch data from our database, but it can't do that unless it can make http requests!
Therefore, we'll need our project to import the HttpClientModule. Let's import it and include it in the array of imports.


.../app/app.module.ts

    import { HttpClientModule } from '@angular/common/http';
    @NgModule({
    ...
    imports: [
        BrowserModule,
        HttpClientModule
    ],
    ...
    })




Dependency Injection:

We use dependency injection when one part of our app depends on another.
For example, our service depends on HttpClient to make http requests!
The underscore is conventional.


.../app/http.service.ts

    import { HttpClient } from '@angular/common/http';

    export class HttpService {
        constructor(private _http: HttpClient){}
    }


The other dependency injection we'll need is injecting the service into a component.
A service will not be used unless it is required by a component, so let's open our root component's .ts file.
Import the service and make it an attribute in the class.


.../app/app.component.ts

    import { HttpService } from './http.service';
    export class AppComponent {
    title = 'app';
    constructor(private _httpService: HttpService){}
    }




Now we're all set up to start making http requests from the service!
Let's begin by using the route in our Restful Task API assignment that fetches all tasks. Make a function called getTasks().
It will use the http module's .get() method to go to our route (in this example, that route is /tasks).
Since Angular returns an Observable, let's store it in a variable and subscribe.
For now, just have your service print the data that we get back.

.../app/http.service.ts

    getTasks(){
        // our http response is an Observable, store it in a variable
        let tempObservable = this._http.get('/tasks');
        // subscribe to the Observable and provide the code we would like to do with our data from the response
        tempObservable.subscribe(data => console.log("Got our tasks!", data));
    }
    To invoke this function, let's call it in the constructor method of our service. This way, it will be the first thing our service will do.

.../app/http.service.ts

    export class HttpService {
        constructor(private _http: HttpClient){
            this.getTasks();
        }
    }
Run your project, open Inspect Element in your browser, and you should see your tasks being printed in the console!







~~~~~~~~~~ Move the Control to the Component ~~~~~~~~~~


Yeah so the whole time, components are really the ones that are supposed to be using the service, controlling when they are used,
and storing the data on the client-side. So let's set that up so it can do that.



First things first, we import OnInit form '@angular/core' and implement it. Also making sure to put the ngOnInit method in there
as well. Not sure why we can't just use the constructor. Finally, we took the invocation of the getTasks() method out of the
constructor of the service and put it here.


~~~ app.components.ts ~~~

    import { Component, OnInit } from '@angular/core';

    export class AppComponent implements OnInit {
        constructor(private _httpService: HttpService){}

        // ngOnInit will run when the component is initialized, after the constructor method.

        ngOnInit(){
        this.getTasksFromService();
        }
        getTasksFromService(){
        this._httpService.getTasks();
        }
    }




Let's put this down in the service so, when the component invokes it, it can be returned there


~~~ http.service.ts ~~~

    getTasks() {
        return this._http.get('/tasks')
    }




Last thing, we can set tasks to be an array that will be taking all the data we get. And we move the logic we used to have
right here to the component, so the component subscribes to the data like it should be. And then we can store it!


~~~ app.component.ts ~~~

    export class AppComponent implements OnInit {

        tasks = [];
        
        getTasksFromService(){

        let observable = this._httpService.getTasks();
        
        observable.subscribe(data => {
            console.log("Got our tasks!", data)

            // In this example, the array of tasks is assigned to the key 'tasks' in the data object. 
            // This may be different for you, depending on how you set up your Task API.

            this.tasks = data['tasks'];
        });
        }
    }








~~~~~~~~~~ DOM Manipulation and Directives ~~~~~~~~~~


Any vars you need on the page need to be attributes in the component class and referenced in the html with {{double_brackets}}

If you ever have variables you want to put in an attribute, it is done like so
<input type="text" [value]="first_name" />




Directives let you use JS code right in the page. ngIf hides and shows the element depending on the condition, and ngFor obviously
repeats an element based on a loop.


    <p *ngIf="loggedIn"> You are logged in! </p>
    <p *ngFor="let snack of snacks"> {{snack}} </p>
    <p *ngIf="snacks.length < 3"> You need more snacks. </p>








~~~~~~~~~~ Events ~~~~~~~~~~


You put the event like an attribute in the tag, but in parentheses. The value of which is the function to run

.../app/app.component.html

    <button (click)="onButtonClick()" >Click me!</button>
    <button (click)="onButtonClickParam(5)">Click me!</button>
    <button (click)="onButtonClickParams(5, 'hello')">Click me!</button>
    <button (click)="onButtonClickEvent($event)">Click me!</button>




In your component class, define the functions you want.

.../app/app.component.ts

    onButtonClick(): void { 
        console.log(`Click event is working`);
    }
    onButtonClickParam(num: Number): void { 
        console.log(`Click event is working with num param: ${num}`);
    }
    onButtonClickParams(num: Number, str: String): void { 
        console.log(`Click event is working with num param: ${num} and str param: ${str}`);
    }
    onButtonClickEvent(event: any): void { 
        console.log(`Click event is working with event: `, event);
    }








~~~~~~~~~~ Forms ~~~~~~~~~~


First things first, the app module file.
import {FormsModule} form '@angular/forms', and include it in the @NgModule imports


.../app/app.module.ts

    import { FormsModule } from '@angular/forms'; // <-- import FormsModule.
    @NgModule({ 
        ...
        imports: [
            BrowserModule,
            FormsModule, // <-- register FormsModule with our app.
        ], 
        ...
    }) 
    export class AppModule { }




Use Events to handle the form submission. We can't have it refreshing the page.

We will be using a new attribute in our input tags: [(ngModel)]="" which will 2-way bind the value of the object from the class file
to the input value. 2-way binding means that if the value is changed in the class file, we'll see that change in the html and vice
versa. If the user changes the value of the input, the object in the class file will reflect the change in real time. The json pipe
is very handy for seeing how the object in the class file changes in real time. Use interpolation to print the object to the html
and include | json to see all the attributes.


.../app/app.component.html

    <form (submit)="onSubmit()">
        <!-- use the json pipe to see how newTask changes in real time -->
        <p> {{ newTask | json }} </p>
        <input type="text" name="newTask.title" [(ngModel)]="newTask.title" />
        <input type="text" name="newTask.description" [(ngModel)]="newTask.description" />
        <input type="submit" value="Create Task" />
    </form>




In the component, we use a newTask property (attribute?) to store it temporarily while it is sent to the service.

.../app/app.component.ts

    import { Component, OnInit } from '@angular/core';

    @Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
    })

    export class AppComponent implements OnInit {
    newTask: any;
    constructor() { } 
        
    ngOnInit() {
        this.newTask = { title: "", description: "" }
    }
        
    onSubmit() {
        // Code to send off the form data (this.newTask) to the Service
        // ...
        // Reset this.newTask to a new, clean object.
        this.newTask = { title: "", description: "" }
    }
    }




And finally, the service posts the task to the database.


.../app/http.service.ts

    addTask(newtask){
        return this._http.post('/task', newtask)
    }








~~~~~~~~~~ Routing ~~~~~~~~~~


First, start your app with routing files added, and generate whatever components needed

    ng new app --routing

    ng g c component-name

Note: When generating new components, angular CLI registers it in the module for you c:




Now, we define our rules and import them in our App through the AppModules file. Pay close attention to the buttons we've used for
the routing links, the [routerLink] attribute has a unique patterned value, double quotes, then an array, and within the array each
part of the url:


    .../app/app.component.html - Redirecting via links

    <button [routerLink]="['alpha']">Load Alpha</button>
    <button [routerLink]="['beta']">Load Beta</button>
    <router-outlet></router-outlet> 




    .../app/app-routing.module.ts

    import { AlphaComponent } from './alpha/alpha.component';
    import { BetaComponent } from './beta/beta.component';
    import { GammaComponent } from './gamma/gamma.component';
    import { PageNotFoundComponent } from './pagenotfound/pagenotfound.component';
    import { NgModule } from '@angular/core';
    import { Routes, RouterModule } from '@angular/router';

    const routes: Routes = [
        { path: 'alpha',component: AlphaComponent },
        { path: 'beta',component: BetaComponent },
        // use a colon and parameter name to include a parameter in the url
        { path: 'gamma/:id', component: GammaComponent },
        { path: '', pathMatch: 'full', redirectTo: '/alpha' },
        { path: '**', component: PageNotFoundComponent }
    ];

    @NgModule({
        imports: [RouterModule.forRoot(routes)],
        exports: [RouterModule]
    })

    export class AppRoutingModule { }




    .../app/app.module.ts

    import { BrowserModule } from '@angular/platform-browser';
    import { NgModule } from '@angular/core';
    import { AppComponent } from './app.component';
    import { AppRoutingModule } from './app-routing.module';
    import { AlphaComponent } from './alpha/alpha.component';
    import { BetaComponent } from './beta/beta.component';
    import { GammaComponent } from './gamma/gamma.component';

    @NgModule({
        declarations: [AppComponent, AlphaComponent, BetaComponent, GammaComponent],
        imports: [BrowserModule, AppRoutingModule],
        providers: [],
        bootstrap: [AppComponent]
    })

    export class AppModule { }




Note: incoming requests only go through Express routes, and are then passed to Angular by the app. They should both have different
routing. Make sure you catch all routes with:

    app.all('*', (res, req, next => {res.sendFile(__dirname + '/dist/app/index.html')}))




If you want to route the user to a different url from within a component or service, you may use the Router module to redirect. To attain a parameter from the current URL, you may use the ActivatedRoute module, which allows us to generate an Observable we can subscribe to. Therefore, each time the url parameter changes, the callback is invoked.

    .../app/app.component.ts
    import { Component, OnInit } from '@angular/core';
    import { ActivatedRoute, Params, Router } from '@angular/router';

    @Component({
        selector: 'app-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
    })

    export class AppComponent implements OnInit {

        constructor(
            private _route: ActivatedRoute,
            private _router: Router
        ) {}

        ngOnInit() {
            this._route.params.subscribe((params: Params) => console.log(params['id']));
        }

        goHome() {
            this._router.navigate(['/home']);
        }
    
    }








~~~~~~~~~~ Nested Components ~~~~~~~~~~


We've been doing it all along! *gasp*
See your component's file? That 'selector' property can be used as an HTML tag.


    .../alpha/alpha.component.ts
    ...
    @Component({
        selector: 'app-alpha',
        templateUrl: './alpha.component.html',
        styleUrls: ['./alpha.component.css']
    })
    ...




So in our root app component, we have the components like usual.

    .../app/app.component.html
    ...
    <app-alpha></app-alpha>
    ...




And, if it pleases you, feel free to nest other components within as such.


    .../alpha/alpha.component.html
    ...
    <app-beta></app-beta>
    ...